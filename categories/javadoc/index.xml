<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javadoc on Andy Dyer</title>
    <link>https://andydyer.org/categories/javadoc/</link>
    <description>Recent content in Javadoc on Andy Dyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://andydyer.org/categories/javadoc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running Shell Commands with Gradle and a Better Way to Delombok</title>
      <link>https://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://andydyer.org/blog/2015/01/22/running-shell-commands-with-gradle-and-a-better-way-to-delombok/</guid>
      <description>A few months ago, I posted about how to use Gradle tasks to &amp;ldquo;delombok&amp;rdquo; code using Lombok annotations before generating Javadocs. My solution for running the delombok task used Ant and was based on what I found after the requisite Google &amp;amp; StackOverflow searching. This worked just fine until Android Studio 1.0 and the associated Gradle build tools were released at the end of the year.
The crux of the problem appeared to be a change in the way dependencies are merged during compilation.</description>
    </item>
    
    <item>
      <title>Delombok and Javadoc with Gradle</title>
      <link>https://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://andydyer.org/blog/2014/09/29/delombok-and-javadoc-with-gradle/</guid>
      <description>I recently had my first experience working with Javadoc to generate documentation for an SDK I&#39;ve been developing at work. In general, I&#39;m in the &amp;ldquo;clean code doesn&#39;t need comments&amp;rdquo; camp, but SDKs tend to be a limited view into a larger abstraction, so good documentation is a necessity.
Javadoc has been around since the introduction of the Java language, so I won&#39;t include a primer here. If you want to learn more, Oracle has you covered.</description>
    </item>
    
  </channel>
</rss>