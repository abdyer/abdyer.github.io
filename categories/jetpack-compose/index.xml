<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jetpack Compose on Andy Dyer</title><link>https://andydyer.org/categories/jetpack-compose/</link><description>Recent content in Jetpack Compose on Andy Dyer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 21 Mar 2021 20:05:20 +0100</lastBuildDate><atom:link href="https://andydyer.org/categories/jetpack-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Family Tree DSL with Jetpack ComposeÂ syntax</title><link>https://andydyer.org/blog/2021/03/21/building-a-family-tree-dsl-with-jetpack-compose-syntax/</link><pubDate>Sun, 21 Mar 2021 20:05:20 +0100</pubDate><guid>https://andydyer.org/blog/2021/03/21/building-a-family-tree-dsl-with-jetpack-compose-syntax/</guid><description>&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://proandroiddev.com/building-a-family-tree-dsl-with-jetpack-compose-syntax-fe652ce6cb0f"&gt;ProAndroidDev&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="why-build-a-dsl"&gt;Why build a DSL?&lt;/h3&gt;
&lt;p&gt;Ever since first getting into Kotlin, I&amp;rsquo;ve known it has a few things that makes building domain-specific languages (DSLs) easier. I&amp;rsquo;ve read the mind-expanding &lt;a href="https://kotlinlang.org/docs/type-safe-builders.html"&gt;type-safe builders&lt;/a&gt; guide for building a DSL for HTML, but until recently I hadn&amp;rsquo;t found a good use case for building a DSL of my own.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jobs.zalando.com/en/jobs/2986308-senior-android-engineer-appcraft-mobile"&gt;My team at Zalando&lt;/a&gt; maintains server-driven UI libraries for Android &amp;amp; iOS that power completely dynamic screens such as home, brand homes, collections, and various landing pages in the &lt;a href="https://play.google.com/store/apps/details?id=de.zalando.mobile"&gt;Zalando fashion&lt;/a&gt; &lt;a href="https://apps.apple.com/de/app/zalando-fashion-shopping/id585629514?l=en"&gt;store apps&lt;/a&gt;. Often, we need to build mock responses during development for new features that don&amp;rsquo;t have a backend implementation yet or models for unit tests. In the past, we&amp;rsquo;d grab chunks of JSON from API responses and edit them, but navigating a wall of text is tedious and editing JSON is far less fun than writing code.&lt;/p&gt;</description></item><item><title>Flexbox Layout Behavior in Jetpack Compose</title><link>https://andydyer.org/blog/2021/03/16/flexbox-layout-behavior-in-jetpack-compose/</link><pubDate>Tue, 16 Mar 2021 10:31:36 +0100</pubDate><guid>https://andydyer.org/blog/2021/03/16/flexbox-layout-behavior-in-jetpack-compose/</guid><description>&lt;blockquote&gt;
&lt;p&gt;Originally published on the &lt;a href="https://engineering.zalando.com/posts/2021/03/flexbox-layout-behavior-in-jetpack-compose.html"&gt;Zalando Engineering Blog&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://drafts.csswg.org/css-flexbox-1/"&gt;CSS Flexible Box Layout specification&lt;/a&gt; (AKA flexbox) is a useful abstraction for describing layouts in a platform agnostic way. For this reason, it is widely used on the web and even &lt;a href="https://github.com/google/flexbox-layout"&gt;on mobile&lt;/a&gt;. Readers familiar with &lt;a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout"&gt;&lt;code&gt;ConstraintLayout&lt;/code&gt;&lt;/a&gt; can think of flexbox as conceptually similar to the &lt;a href="https://developer.android.com/reference/androidx/constraintlayout/helper/widget/Flow"&gt;&lt;code&gt;Flow&lt;/code&gt;&lt;/a&gt; virtual layout it supports. This type of layout is ideal for grids or other groups of views with varying sizes.&lt;/p&gt;</description></item></channel></rss>