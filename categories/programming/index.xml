<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Andy Dyer</title><link>https://andydyer.org/categories/programming/</link><description>Recent content in Programming on Andy Dyer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 01 May 2021 09:01:11 +0100</lastBuildDate><atom:link href="https://andydyer.org/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Spoiling the Dark plot with Kotlin</title><link>https://andydyer.org/blog/2021/05/01/spoiling-the-dark-plot-with-kotlin/</link><pubDate>Sat, 01 May 2021 09:01:11 +0100</pubDate><guid>https://andydyer.org/blog/2021/05/01/spoiling-the-dark-plot-with-kotlin/</guid><description>&lt;h3 id="intro"&gt;Intro&lt;/h3&gt;
&lt;p&gt;As promised in &lt;a href="https://andydyer.org/blog/2021/03/21/building-a-family-tree-dsl-with-jetpack-compose-syntax/"&gt;my last post&lt;/a&gt;, it&amp;rsquo;s time to use our family tree DSL to spoil the plot of &lt;a href="https://dark.netflix.io"&gt;Netflix&amp;rsquo;s Dark series&lt;/a&gt;! ðŸ˜ˆ&lt;/p&gt;
&lt;p&gt;To quickly recap, we have a small but functional (my puns are always intended) DSL for building a family tree in Kotlin:&lt;/p&gt;





 &lt;script src="https://gist.github.com/abdyer/c838ebb995850c1fab59f43c9cefeb35.js"&gt;&lt;/script&gt;


&lt;h3 id="the-dark-family-trees-in-code"&gt;The Dark family trees in code&lt;/h3&gt;
&lt;p&gt;The family trees are of course the focus of the series as they are revealed to us piecemeal; episode by episode, season by season. After watching it, I was overwhelmed with all the details and quickly gave up trying to fit it all together. Sure, I remembered some of the bigger points, but it makes a lot more sense after stepping through the &lt;a href="https://dark.netflix.io"&gt;Dark website&lt;/a&gt; to build the family trees below:&lt;/p&gt;</description></item><item><title>Building a Family Tree DSL with Jetpack ComposeÂ syntax</title><link>https://andydyer.org/blog/2021/03/21/building-a-family-tree-dsl-with-jetpack-compose-syntax/</link><pubDate>Sun, 21 Mar 2021 20:05:20 +0100</pubDate><guid>https://andydyer.org/blog/2021/03/21/building-a-family-tree-dsl-with-jetpack-compose-syntax/</guid><description>&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://proandroiddev.com/building-a-family-tree-dsl-with-jetpack-compose-syntax-fe652ce6cb0f"&gt;ProAndroidDev&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="why-build-a-dsl"&gt;Why build a DSL?&lt;/h3&gt;
&lt;p&gt;Ever since first getting into Kotlin, I&amp;rsquo;ve known it has a few things that makes building domain-specific languages (DSLs) easier. I&amp;rsquo;ve read the mind-expanding &lt;a href="https://kotlinlang.org/docs/type-safe-builders.html"&gt;type-safe builders&lt;/a&gt; guide for building a DSL for HTML, but until recently I hadn&amp;rsquo;t found a good use case for building a DSL of my own.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jobs.zalando.com/en/jobs/2986308-senior-android-engineer-appcraft-mobile"&gt;My team at Zalando&lt;/a&gt; maintains server-driven UI libraries for Android &amp;amp; iOS that power completely dynamic screens such as home, brand homes, collections, and various landing pages in the &lt;a href="https://play.google.com/store/apps/details?id=de.zalando.mobile"&gt;Zalando fashion&lt;/a&gt; &lt;a href="https://apps.apple.com/de/app/zalando-fashion-shopping/id585629514?l=en"&gt;store apps&lt;/a&gt;. Often, we need to build mock responses during development for new features that don&amp;rsquo;t have a backend implementation yet or models for unit tests. In the past, we&amp;rsquo;d grab chunks of JSON from API responses and edit them, but navigating a wall of text is tedious and editing JSON is far less fun than writing code.&lt;/p&gt;</description></item></channel></rss>