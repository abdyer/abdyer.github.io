<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UI on Andy Dyer</title><link>https://andydyer.org/categories/ui/</link><description>Recent content in UI on Andy Dyer</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 02 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://andydyer.org/categories/ui/index.xml" rel="self" type="application/rss+xml"/><item><title>Music Library 3.0 - Material Design Update</title><link>https://andydyer.org/blog/2014/11/02/music-library-3.0-material-design-update/</link><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>https://andydyer.org/blog/2014/11/02/music-library-3.0-material-design-update/</guid><description>&lt;img src="https://andydyer.org/images/music_library_icon.png" alt="Music Library" style="width: 150px; float: left; margin-right: 20px" /&gt;
I started developing [Music Library](https://play.google.com/store/apps/details?id=com.dandydev.medialibrary) about four years ago when I wanted an app for organizing my record collection. Armed with my Nexus One, Eclipse, and a copy of Apress' [Pro Android](http://www.amazon.com/gp/product/1430246804/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430246804&amp;linkCode=as2&amp;tag=slacod-20&amp;linkId=FMLK73AOGDPPJEM3), I spent my nights and weekends learning the inner workings of my now-favorite mobile OS.
&lt;p&gt;Over the years, Music Library has been a playground of sorts for exploring various open source libraries, patterns, and best practices. While there is still a fair amount of code I would write differently today (I&amp;rsquo;m looking at you, ContentProvider), the app has been and continues to be an enjoyable side project.&lt;/p&gt;</description></item><item><title>Android's Material Design and The Bauhaus</title><link>https://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</link><pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate><guid>https://andydyer.org/blog/2014/07/13/androids-material-design-and-the-bauhaus/</guid><description>&lt;p&gt;Since Android Gingerbread (v2.3), loyalists know that each version has an Easter egg that can be accessed by repeatedly tapping the version number on the Settings &amp;gt; About screen. The Android &amp;ldquo;L&amp;rdquo; Preview is no exception.&lt;/p&gt;
&lt;p&gt;While test driving the new version, I naturally had to see what Google had hidden for me in their latest release. Previous versions have had everything from &lt;a href="https://www.youtube.com/watch?v=PeAFCIvqNxc"&gt;gingerbread zombies&lt;/a&gt; to &lt;a href="https://www.youtube.com/watch?v=DfY73GBBHxg"&gt;Nyandroids&lt;/a&gt; and a &lt;a href="https://www.youtube.com/watch?v=iN-nJdAJS7g"&gt;pile of jelly beans&lt;/a&gt;. The Android &amp;ldquo;L&amp;rdquo; Preview build has a &lt;a href="https://www.youtube.com/watch?v=_He5MIYJas8"&gt;simple animation of random overlapping red and blue rectangles&lt;/a&gt;. Several Android blogs mentioned this, but dismissed it as &lt;a href="http://www.androidcentral.com/android-l-Previews-easter-egg-webdriver-torso"&gt;mysterious&lt;/a&gt; and &lt;a href="http://www.slashgear.com/hands-on-with-the-android-l-features-google-didnt-mention-27335613/"&gt;strange&lt;/a&gt;. While these random rectangles are clearly the same used by Google&amp;rsquo;s &lt;a href="http://www.bbc.com/news/technology-27778071"&gt;WebDriver Torso&lt;/a&gt; YouTube video quality testing, so far everyone seems to have missed the most obvious explanation.&lt;/p&gt;</description></item></channel></rss>